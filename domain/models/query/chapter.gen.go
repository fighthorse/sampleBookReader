// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fighthorse/sampleBookReader/domain/models/model"
)

func newChapter(db *gorm.DB, opts ...gen.DOOption) chapter {
	_chapter := chapter{}

	_chapter.chapterDo.UseDB(db, opts...)
	_chapter.chapterDo.UseModel(&model.Chapter{})

	tableName := _chapter.chapterDo.TableName()
	_chapter.ALL = field.NewAsterisk(tableName)
	_chapter.ID = field.NewInt32(tableName, "id")
	_chapter.BookID = field.NewInt32(tableName, "book_id")
	_chapter.ChapterName = field.NewString(tableName, "chapter_name")
	_chapter.ChapterContent = field.NewString(tableName, "chapter_content")
	_chapter.ChapterRank = field.NewInt32(tableName, "chapter_rank")

	_chapter.fillFieldMap()

	return _chapter
}

type chapter struct {
	chapterDo chapterDo

	ALL            field.Asterisk
	ID             field.Int32
	BookID         field.Int32
	ChapterName    field.String // 章节标题
	ChapterContent field.String // 章节内容
	ChapterRank    field.Int32  // 章节排序

	fieldMap map[string]field.Expr
}

func (c chapter) Table(newTableName string) *chapter {
	c.chapterDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chapter) As(alias string) *chapter {
	c.chapterDo.DO = *(c.chapterDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chapter) updateTableName(table string) *chapter {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.BookID = field.NewInt32(table, "book_id")
	c.ChapterName = field.NewString(table, "chapter_name")
	c.ChapterContent = field.NewString(table, "chapter_content")
	c.ChapterRank = field.NewInt32(table, "chapter_rank")

	c.fillFieldMap()

	return c
}

func (c *chapter) WithContext(ctx context.Context) *chapterDo { return c.chapterDo.WithContext(ctx) }

func (c chapter) TableName() string { return c.chapterDo.TableName() }

func (c chapter) Alias() string { return c.chapterDo.Alias() }

func (c chapter) Columns(cols ...field.Expr) gen.Columns { return c.chapterDo.Columns(cols...) }

func (c *chapter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chapter) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["book_id"] = c.BookID
	c.fieldMap["chapter_name"] = c.ChapterName
	c.fieldMap["chapter_content"] = c.ChapterContent
	c.fieldMap["chapter_rank"] = c.ChapterRank
}

func (c chapter) clone(db *gorm.DB) chapter {
	c.chapterDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chapter) replaceDB(db *gorm.DB) chapter {
	c.chapterDo.ReplaceDB(db)
	return c
}

type chapterDo struct{ gen.DO }

func (c chapterDo) Debug() *chapterDo {
	return c.withDO(c.DO.Debug())
}

func (c chapterDo) WithContext(ctx context.Context) *chapterDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chapterDo) ReadDB() *chapterDo {
	return c.Clauses(dbresolver.Read)
}

func (c chapterDo) WriteDB() *chapterDo {
	return c.Clauses(dbresolver.Write)
}

func (c chapterDo) Session(config *gorm.Session) *chapterDo {
	return c.withDO(c.DO.Session(config))
}

func (c chapterDo) Clauses(conds ...clause.Expression) *chapterDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chapterDo) Returning(value interface{}, columns ...string) *chapterDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chapterDo) Not(conds ...gen.Condition) *chapterDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chapterDo) Or(conds ...gen.Condition) *chapterDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chapterDo) Select(conds ...field.Expr) *chapterDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chapterDo) Where(conds ...gen.Condition) *chapterDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chapterDo) Order(conds ...field.Expr) *chapterDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chapterDo) Distinct(cols ...field.Expr) *chapterDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chapterDo) Omit(cols ...field.Expr) *chapterDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chapterDo) Join(table schema.Tabler, on ...field.Expr) *chapterDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chapterDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chapterDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chapterDo) RightJoin(table schema.Tabler, on ...field.Expr) *chapterDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chapterDo) Group(cols ...field.Expr) *chapterDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chapterDo) Having(conds ...gen.Condition) *chapterDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chapterDo) Limit(limit int) *chapterDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chapterDo) Offset(offset int) *chapterDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chapterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chapterDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chapterDo) Unscoped() *chapterDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chapterDo) Create(values ...*model.Chapter) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chapterDo) CreateInBatches(values []*model.Chapter, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chapterDo) Save(values ...*model.Chapter) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chapterDo) First() (*model.Chapter, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chapter), nil
	}
}

func (c chapterDo) Take() (*model.Chapter, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chapter), nil
	}
}

func (c chapterDo) Last() (*model.Chapter, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chapter), nil
	}
}

func (c chapterDo) Find() ([]*model.Chapter, error) {
	result, err := c.DO.Find()
	return result.([]*model.Chapter), err
}

func (c chapterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Chapter, err error) {
	buf := make([]*model.Chapter, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chapterDo) FindInBatches(result *[]*model.Chapter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chapterDo) Attrs(attrs ...field.AssignExpr) *chapterDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chapterDo) Assign(attrs ...field.AssignExpr) *chapterDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chapterDo) Joins(fields ...field.RelationField) *chapterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chapterDo) Preload(fields ...field.RelationField) *chapterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chapterDo) FirstOrInit() (*model.Chapter, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chapter), nil
	}
}

func (c chapterDo) FirstOrCreate() (*model.Chapter, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chapter), nil
	}
}

func (c chapterDo) FindByPage(offset int, limit int) (result []*model.Chapter, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chapterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chapterDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chapterDo) Delete(models ...*model.Chapter) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chapterDo) withDO(do gen.Dao) *chapterDo {
	c.DO = *do.(*gen.DO)
	return c
}
