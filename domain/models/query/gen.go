// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                     = new(Query)
	Author                *author
	Book                  *book
	Category              *category
	Chapter               *chapter
	Comment               *comment
	Feedback              *feedback
	GoadminMenu           *goadminMenu
	GoadminOperationLog   *goadminOperationLog
	GoadminPermission     *goadminPermission
	GoadminRole           *goadminRole
	GoadminRoleMenu       *goadminRoleMenu
	GoadminRolePermission *goadminRolePermission
	GoadminRoleUser       *goadminRoleUser
	GoadminSession        *goadminSession
	GoadminSite           *goadminSite
	GoadminUser           *goadminUser
	GoadminUserPermission *goadminUserPermission
	Member                *member
	MemberReader          *memberReader
	MemberShelf           *memberShelf
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Author = &Q.Author
	Book = &Q.Book
	Category = &Q.Category
	Chapter = &Q.Chapter
	Comment = &Q.Comment
	Feedback = &Q.Feedback
	GoadminMenu = &Q.GoadminMenu
	GoadminOperationLog = &Q.GoadminOperationLog
	GoadminPermission = &Q.GoadminPermission
	GoadminRole = &Q.GoadminRole
	GoadminRoleMenu = &Q.GoadminRoleMenu
	GoadminRolePermission = &Q.GoadminRolePermission
	GoadminRoleUser = &Q.GoadminRoleUser
	GoadminSession = &Q.GoadminSession
	GoadminSite = &Q.GoadminSite
	GoadminUser = &Q.GoadminUser
	GoadminUserPermission = &Q.GoadminUserPermission
	Member = &Q.Member
	MemberReader = &Q.MemberReader
	MemberShelf = &Q.MemberShelf
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		Author:                newAuthor(db, opts...),
		Book:                  newBook(db, opts...),
		Category:              newCategory(db, opts...),
		Chapter:               newChapter(db, opts...),
		Comment:               newComment(db, opts...),
		Feedback:              newFeedback(db, opts...),
		GoadminMenu:           newGoadminMenu(db, opts...),
		GoadminOperationLog:   newGoadminOperationLog(db, opts...),
		GoadminPermission:     newGoadminPermission(db, opts...),
		GoadminRole:           newGoadminRole(db, opts...),
		GoadminRoleMenu:       newGoadminRoleMenu(db, opts...),
		GoadminRolePermission: newGoadminRolePermission(db, opts...),
		GoadminRoleUser:       newGoadminRoleUser(db, opts...),
		GoadminSession:        newGoadminSession(db, opts...),
		GoadminSite:           newGoadminSite(db, opts...),
		GoadminUser:           newGoadminUser(db, opts...),
		GoadminUserPermission: newGoadminUserPermission(db, opts...),
		Member:                newMember(db, opts...),
		MemberReader:          newMemberReader(db, opts...),
		MemberShelf:           newMemberShelf(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Author                author
	Book                  book
	Category              category
	Chapter               chapter
	Comment               comment
	Feedback              feedback
	GoadminMenu           goadminMenu
	GoadminOperationLog   goadminOperationLog
	GoadminPermission     goadminPermission
	GoadminRole           goadminRole
	GoadminRoleMenu       goadminRoleMenu
	GoadminRolePermission goadminRolePermission
	GoadminRoleUser       goadminRoleUser
	GoadminSession        goadminSession
	GoadminSite           goadminSite
	GoadminUser           goadminUser
	GoadminUserPermission goadminUserPermission
	Member                member
	MemberReader          memberReader
	MemberShelf           memberShelf
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Author:                q.Author.clone(db),
		Book:                  q.Book.clone(db),
		Category:              q.Category.clone(db),
		Chapter:               q.Chapter.clone(db),
		Comment:               q.Comment.clone(db),
		Feedback:              q.Feedback.clone(db),
		GoadminMenu:           q.GoadminMenu.clone(db),
		GoadminOperationLog:   q.GoadminOperationLog.clone(db),
		GoadminPermission:     q.GoadminPermission.clone(db),
		GoadminRole:           q.GoadminRole.clone(db),
		GoadminRoleMenu:       q.GoadminRoleMenu.clone(db),
		GoadminRolePermission: q.GoadminRolePermission.clone(db),
		GoadminRoleUser:       q.GoadminRoleUser.clone(db),
		GoadminSession:        q.GoadminSession.clone(db),
		GoadminSite:           q.GoadminSite.clone(db),
		GoadminUser:           q.GoadminUser.clone(db),
		GoadminUserPermission: q.GoadminUserPermission.clone(db),
		Member:                q.Member.clone(db),
		MemberReader:          q.MemberReader.clone(db),
		MemberShelf:           q.MemberShelf.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Author:                q.Author.replaceDB(db),
		Book:                  q.Book.replaceDB(db),
		Category:              q.Category.replaceDB(db),
		Chapter:               q.Chapter.replaceDB(db),
		Comment:               q.Comment.replaceDB(db),
		Feedback:              q.Feedback.replaceDB(db),
		GoadminMenu:           q.GoadminMenu.replaceDB(db),
		GoadminOperationLog:   q.GoadminOperationLog.replaceDB(db),
		GoadminPermission:     q.GoadminPermission.replaceDB(db),
		GoadminRole:           q.GoadminRole.replaceDB(db),
		GoadminRoleMenu:       q.GoadminRoleMenu.replaceDB(db),
		GoadminRolePermission: q.GoadminRolePermission.replaceDB(db),
		GoadminRoleUser:       q.GoadminRoleUser.replaceDB(db),
		GoadminSession:        q.GoadminSession.replaceDB(db),
		GoadminSite:           q.GoadminSite.replaceDB(db),
		GoadminUser:           q.GoadminUser.replaceDB(db),
		GoadminUserPermission: q.GoadminUserPermission.replaceDB(db),
		Member:                q.Member.replaceDB(db),
		MemberReader:          q.MemberReader.replaceDB(db),
		MemberShelf:           q.MemberShelf.replaceDB(db),
	}
}

type queryCtx struct {
	Author                *authorDo
	Book                  *bookDo
	Category              *categoryDo
	Chapter               *chapterDo
	Comment               *commentDo
	Feedback              *feedbackDo
	GoadminMenu           *goadminMenuDo
	GoadminOperationLog   *goadminOperationLogDo
	GoadminPermission     *goadminPermissionDo
	GoadminRole           *goadminRoleDo
	GoadminRoleMenu       *goadminRoleMenuDo
	GoadminRolePermission *goadminRolePermissionDo
	GoadminRoleUser       *goadminRoleUserDo
	GoadminSession        *goadminSessionDo
	GoadminSite           *goadminSiteDo
	GoadminUser           *goadminUserDo
	GoadminUserPermission *goadminUserPermissionDo
	Member                *memberDo
	MemberReader          *memberReaderDo
	MemberShelf           *memberShelfDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Author:                q.Author.WithContext(ctx),
		Book:                  q.Book.WithContext(ctx),
		Category:              q.Category.WithContext(ctx),
		Chapter:               q.Chapter.WithContext(ctx),
		Comment:               q.Comment.WithContext(ctx),
		Feedback:              q.Feedback.WithContext(ctx),
		GoadminMenu:           q.GoadminMenu.WithContext(ctx),
		GoadminOperationLog:   q.GoadminOperationLog.WithContext(ctx),
		GoadminPermission:     q.GoadminPermission.WithContext(ctx),
		GoadminRole:           q.GoadminRole.WithContext(ctx),
		GoadminRoleMenu:       q.GoadminRoleMenu.WithContext(ctx),
		GoadminRolePermission: q.GoadminRolePermission.WithContext(ctx),
		GoadminRoleUser:       q.GoadminRoleUser.WithContext(ctx),
		GoadminSession:        q.GoadminSession.WithContext(ctx),
		GoadminSite:           q.GoadminSite.WithContext(ctx),
		GoadminUser:           q.GoadminUser.WithContext(ctx),
		GoadminUserPermission: q.GoadminUserPermission.WithContext(ctx),
		Member:                q.Member.WithContext(ctx),
		MemberReader:          q.MemberReader.WithContext(ctx),
		MemberShelf:           q.MemberShelf.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
